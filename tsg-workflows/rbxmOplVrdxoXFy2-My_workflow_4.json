{
  "name": "My workflow 4",
  "nodes": [
    {
      "parameters": {},
      "id": "9d4c8e52-8e9f-4104-915c-d80571c96f42",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [420, 420]
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "9b1d5e2d-f971-421a-83ba-7bbd4ad6a1fd",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [1000, 460]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const chunks = [];\nconst chunkSize = 1000;\nconst chunkOverlap = 200;\nconst text = $('Extract from File').item.json.text.replace(/\\n/, '');\n\nfor (let i=0,j=Math.round(text.length/chunkSize)+1;i<j;i++) {\n  chunks.push(\n    text.substr(\n      Math.max(0,(i * chunkSize)-chunkOverlap),\n      chunkSize\n    )\n  );\n}\n\nreturn { chunks };"
      },
      "id": "5bd17398-d34f-41dc-a986-ecb24c1b8918",
      "name": "Create Chunks From Doc",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 540]
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{\n{\n  \"content\": `${$json.text }\\n---\\n${$json.chunk}`\n}\n}}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "title",
                "value": "={{ $json.title }}"
              }
            ]
          }
        }
      },
      "id": "58388f9c-d99e-4ee6-98da-6fbf20701e07",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [3520, 740]
    },
    {
      "parameters": {
        "chunkSize": 2000,
        "options": {}
      },
      "id": "638a0d3b-ebf7-4f97-b626-7fe551def60b",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [3520, 860]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "4d0fdb60-fa83-4781-b2f9-8f3fa1835b58",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [860, 1380],
      "webhookId": "436ca65c-46ca-4f8c-86e2-b8633b428eea"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "611b083d-42af-40fb-841a-7b23a4c403c3",
      "name": "Anthropic Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [1060, 1560]
    },
    {
      "parameters": {},
      "id": "9d62da03-d4c3-4612-8e4a-27b2bd3348e3",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.2,
      "position": [1180, 1560]
    },
    {
      "parameters": {
        "content": "## 2. Split Document Into Chunks\nUnlike traditional vector store workflows, we want to split our document prior to embedding and this is easily achieved using the Code node. Feel free to adjust the text splitting params or replace it entirely to suit the needs of your data.\n\nYou may need to play around and adjust the chunksize for your particular data. Contextual retrieval as described in the article is expected to return 20 results so best to keep these small.",
        "height": 513.3089035768523,
        "width": 553.1909664515983,
        "color": 7
      },
      "id": "6ade564a-508d-4182-a6cd-6e0c28c0e2d6",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1560, 280]
    },
    {
      "parameters": {
        "content": "## 3. Generate Sparse Vector and Contextual Text For Chunk\nWith our chunks, we'll want to achieve the following:\n(1) **Generate a contextual summary of what the chunk is about relative to the whole document**.\nFor this, we'll use the basic LLM node using Antrophic's Claude Haiku model with the recommended prompt as shared in the article.\n(2) **Generate a sparse vector for the chunk and summary**\nWe can use the python code node to generate TF-IDF sparse vectors with the scikit-learn library. Good to know, this library doesn't require external dependency setup steps and auto-installs on first time use.\n\nOnce we have our generated values, we'll combine them with the chunk object using the Edit Fields node.",
        "height": 748.1255853485875,
        "width": 1019.742667955435,
        "color": 7
      },
      "id": "51b98e17-abb8-4619-9c08-8ba399dacc2c",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [2160, 280]
    },
    {
      "parameters": {
        "content": "## 4. Insert Docs to Qdrant (via Langchain Code Node)\nUnfortunately, n8n (or rather langchain) doesn't support inserting sparse vectors so we'll have to build our own \"Insert Documents\" node using a Langchain Code Node. In this Langchain code node, we'll forego the langchain vectorstore node and use the Qdrant client SDK directly instead.\n\n**Note** To avoid duplication, this node will also delete existing vectors by document title. It does so by tagging each vector with the document title we extracted earlier then when run again, performs a Qdrant delete by filter before upserting.\n\n**Required:**\nTo use this demonstration, you must complete the following:\n* Ensure your Qdrant instance is running and set the URL in the node\n* Create the Qdrant collection as instructed (see yellow sticky)\n",
        "height": 783.6896392386983,
        "width": 828.7526122872351,
        "color": 7
      },
      "id": "bd7f7b51-7a42-462f-803f-3625bb7659ff",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [3200, 260]
    },
    {
      "parameters": {
        "content": "## 5. Retrieval using Sparse Vectors and ReRanker (Chat Agent Example)\nFor retrieval, we want to be able to (1) query with both dense and sparse vectors and (2) apply a rerank algorithm to our vector store docs. We can setup a custom vector store tool which does both using a custom Langchain Code node.\n\n**Required:**\nTo use this demonstration, you must complete the following:\n* Installed the updated version of the @Qdrant/js-client-rest module\n* Ensure your Qdrant instance is running and set the URL in the \"Qdrant with Cohere ReRank\" subnode\n* Add your Cohere API key in the \"Qdrant with Cohere ReRank\" subnode.",
        "height": 828.8619472986827,
        "width": 973.8052093023243,
        "color": 7
      },
      "id": "ab99c44a-905c-4864-b909-8ecec5e83591",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [720, 1080]
    },
    {
      "parameters": {},
      "id": "9d7782c9-1197-4e21-80df-ba7c3044d1b9",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [1800, 1880]
    },
    {
      "parameters": {
        "name": "get_sparse_vector",
        "description": "Generates TD-IDF sparse vector for query",
        "workflowId": {
          "__rl": true,
          "value": "={{ $workflow.id }}",
          "mode": "id"
        },
        "fields": {
          "values": [
            {
              "name": "route",
              "stringValue": "get_sparse_vectors"
            }
          ]
        }
      },
      "id": "3a43793c-8159-4676-a1df-e2b33b9e8f27",
      "name": "Get Sparse Vector Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [1480, 1680]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "87bc3071-4179-4aed-aa88-37c6381d8b73",
              "name": "query",
              "value": "Who created Bitcoin?",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "9d70cbee-bd5b-4733-a547-8532edfb0ad5",
      "name": "Query",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1900, 1360]
    },
    {
      "parameters": {
        "name": "get_sparse_vector",
        "description": "Generates TD-IDF sparse vector for query",
        "workflowId": {
          "__rl": true,
          "value": "={{ $workflow.id }}",
          "mode": "id"
        }
      },
      "id": "088907f4-631e-46d6-b195-7c4f179df395",
      "name": "Get Sparse Vector Tool1",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [2280, 1520]
    },
    {
      "parameters": {
        "content": "## 6. Retrieval using Sparse Vectors and ReRanker (Retrieval Example)\nThis demonstration is similar to the previous step but is not using an AI Agent.\n\n**Required:**\nTo use this demonstration, you must complete the following:\n* Installed the updated version of the @Qdrant/js-client-rest module\n* Ensure your Qdrant instance is running and set the URL in the \"Qdrant with Cohere ReRank1\" node\n* Add your Cohere API key in the \"Qdrant with Cohere ReRank1\" node.",
        "height": 683.3722976015338,
        "width": 838.4124151865863,
        "color": 7
      },
      "id": "8221dd37-3547-44d7-a251-2c3fbb945268",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1720, 1060]
    },
    {
      "parameters": {
        "model": "claude-3-haiku-20240307",
        "options": {}
      },
      "id": "72234b06-d802-4e80-b389-c03c777b2076",
      "name": "Anthropic Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [2440, 800]
    },
    {
      "parameters": {
        "content": "### Create Collection!\nYou need to create a Qdrant Collection as follows:\n\n* Go to http[s]:\\//<qdrant_url>/dashboard#/console\nIf you are hosting locally, this is usually http://localhost:6333/dashboard#/console\n* Copy the following into the left panel. This will tell Qdrant to create a new collection called “contextual_retrieval_example”. You can change this of course but you’ll also need to change all “collectionName” references in the template as well!\n\n```\nPUT collections/contextual_retrieval_example\n{\n  \"vectors\": {\n    \"default\": {\n      \"distance\": \"Cosine\",\n      \"size\": 1024\n    }\n  },\n  \"sparse_vectors\": {\n    \"bm42\": {\n      \"modifier\": \"idf\"\n    }\n  }\n}\n```",
        "height": 505.701259707935,
        "width": 516.3129732020735
      },
      "id": "2059fd6b-3e81-4f0e-b082-1e5465074421",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [3920, 580]
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunks",
        "options": {
          "destinationFieldName": "chunk"
        }
      },
      "id": "9143be85-f364-4689-9d4f-d8b30bfe34b6",
      "name": "Chunks To List",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [2260, 600]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "language": "python",
        "pythonCode": "texts = [f\"{_('Generate Contextual Text').item.json.text}\\n---\\n{_('Chunks To List').item.json.chunk}\"]\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Create TF-IDF vectorizer\nvectorizer = TfidfVectorizer()\n\n# Fit and transform the texts to generate TF-IDF vectors\nX = vectorizer.fit_transform(texts)\n\nreturn {\n  \"sparse\": {\n    \"indices\": X.indices.tolist(),\n    \"values\": X.data.tolist()\n  }\n}"
      },
      "id": "3de68e32-fdd4-4e1f-be5e-0c8e5a3f7a6e",
      "name": "Generate TF-IDF Sparse Vectors",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2780, 600]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "069d067c-3534-4939-8ff4-34dee02a9436",
              "name": "chunk",
              "value": "={{ $('Chunks To List').item.json.chunk }}",
              "type": "string"
            },
            {
              "id": "24e01f4f-e156-47e9-a89e-9cbdccda6bd4",
              "name": "text",
              "value": "={{ $('Generate Contextual Text').item.json.text }}",
              "type": "string"
            },
            {
              "id": "fa48ddaa-4658-463a-b1af-8308c24e325a",
              "name": "sparse",
              "value": "={{ $json.sparse }}",
              "type": "object"
            },
            {
              "id": "442efe87-a826-402c-aadc-909923915d30",
              "name": "title",
              "value": "={{ $('Get Doc Attributes').first().json.output.title }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "9b32602f-f21c-4bea-bc64-e5ffb89f9c36",
      "name": "Get Values",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [2960, 600]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "language": "python",
        "pythonCode": "import json\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Create TF-IDF vectorizer\nvectorizer = TfidfVectorizer()\n\n# Fit and transform the texts to generate TF-IDF vectors\ntexts = [_input.item.json.query]\nX = vectorizer.fit_transform(texts)\n\nreturn {\n  \"response\": {\n    \"indices\": X.indices.tolist(),\n    \"values\": X.data.tolist()\n  }\n}"
      },
      "id": "bc153324-b9d3-43b8-8e07-277a7783c6fa",
      "name": "Generate Sparse Vectors",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2200, 1880]
    },
    {
      "parameters": {
        "content": "## Implementing Antrophic's Contextual Retrieval \n\nThis workflow is inspired by the Antrophic article, [\"Introducing Contextual Retrieval\"](https://www.anthropic.com/news/contextual-retrieval), and tries to replicate the instructions given.\n\n**Original post here**: https://community.n8n.io/t/building-the-ultimate-rag-setup-with-contextual-summaries-sparse-vectors-and-reranking/54861/1\n\n### Changelog\n2024-10-10 Updated to 1.62.1\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n",
        "height": 634.9891793542789,
        "width": 405.66570496276904
      },
      "id": "f7d44d78-f1b0-46f5-a7bf-b45f462639dc",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [280, 0]
    },
    {
      "parameters": {
        "modelName": "embed-english-v3.0"
      },
      "id": "f7ae3572-0436-4de4-843b-a1fe8c15b166",
      "name": "Embeddings Cohere",
      "type": "@n8n/n8n-nodes-langchain.embeddingsCohere",
      "typeVersion": 1,
      "position": [3380, 740]
    },
    {
      "parameters": {
        "modelName": "embed-english-v3.0"
      },
      "id": "acdd7873-3b80-4701-a0b2-456b56028be7",
      "name": "Embeddings Cohere1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsCohere",
      "typeVersion": 1,
      "position": [1300, 1700]
    },
    {
      "parameters": {
        "modelName": "embed-english-v3.0"
      },
      "id": "4777eaf5-3a3b-4196-bce0-b7cc41e2a4e5",
      "name": "Embeddings Cohere2",
      "type": "@n8n/n8n-nodes-langchain.embeddingsCohere",
      "typeVersion": 1,
      "position": [2080, 1520]
    },
    {
      "parameters": {
        "content": "### PART 1 of 2\nThis part generates and inserts into the vector store. You only have to do this once per document.",
        "height": 102.577757187954,
        "width": 389.2978313113204,
        "color": 5
      },
      "id": "216f9946-b656-4fe5-b794-305f935a0bc9",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [720, 160]
    },
    {
      "parameters": {
        "content": "### PART 2 of 2\nThis part demostrates 2 examples of retrieve or query your sparse vectors.",
        "height": 80,
        "width": 524.5591143796955,
        "color": 5
      },
      "id": "99ca6125-fc27-4603-ba01-368947c65c9e",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [740, 960]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.route }}",
                    "rightValue": "get_sparse_vectors",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "get sparse vectors"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "84ac9b84-0e46-45da-b719-843d947ea429",
                    "leftValue": "={{ $json.route }}",
                    "rightValue": "my_other_thing",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "my other thing"
            }
          ]
        },
        "options": {
          "fallbackOutput": "none"
        }
      },
      "id": "0f49b141-62bb-4a00-b9a7-471f8113862a",
      "name": "Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [1960, 1880]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<document> \n{{ $('Extract from File').first().json.text }} \n</document>\nHere is the chunk we want to situate within the whole document \n<chunk> \n{{ $json.chunk }}\n</chunk> \nPlease give a short succinct context to situate this chunk within the overall document for the purposes of improving search retrieval of the chunk. Answer only with the succinct context and nothing else. "
      },
      "id": "36ebdb7b-97ec-4124-afbd-b8a5fdc3d3fc",
      "name": "Generate Contextual Text",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [2440, 600]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "a5fd9763-1366-4187-9ea0-d932c65eb386",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [1060, 1380]
    },
    {
      "parameters": {
        "content": "### Sparse Vector Tool for Agent\nUnfortunately there is a bug linking code tool to custom langchain code node so this is the only approach until that is fixed!",
        "height": 287.1680736478712,
        "width": 652.0156501726113,
        "color": 6
      },
      "id": "ee2d887e-082d-4f89-b281-d435c64be04e",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1740, 1780]
    },
    {
      "parameters": {
        "url": "https://bitcoin.org/bitcoin.pdf",
        "options": {}
      },
      "id": "7d4e133b-65a3-4fe3-af12-64d4607fd8e0",
      "name": "Get Document",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [820, 460]
    },
    {
      "parameters": {
        "model": "claude-3-haiku-20240307",
        "options": {}
      },
      "id": "407cbce7-b78c-4c98-bc7b-c21918cfe631",
      "name": "Anthropic Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [1180, 620]
    },
    {
      "parameters": {
        "text": "={{ $json.text }}",
        "attributes": {
          "attributes": [
            {
              "name": "title",
              "description": "The title of the document.",
              "required": true
            }
          ]
        },
        "options": {}
      },
      "id": "216b00b8-0de0-467b-8ee1-9fd387111b07",
      "name": "Get Doc Attributes",
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1,
      "position": [1180, 460]
    },
    {
      "parameters": {
        "content": "## 1. Import Document PDF\n\nFor this demonstration, we'll use the Bitcoin Whitepaper from bitcoin.org.\nWe'll take this time to also extract specific document attributes which we can use as metadata.",
        "height": 513.3089035768523,
        "width": 807.2147979360316,
        "color": 7
      },
      "id": "a87eebfe-16c4-4f52-9a3f-1ac1919238cf",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [720, 280]
    },
    {
      "parameters": {},
      "id": "f5f58d5b-007b-40b4-b1e0-fe50b9babb4e",
      "name": "Insert Documents with Sparse Vectors",
      "type": "@n8n/n8n-nodes-langchain.code",
      "typeVersion": 1,
      "position": [3420, 560]
    },
    {
      "parameters": {},
      "id": "e176aba7-af12-4b6d-8f0e-f16712ec00d1",
      "name": "Qdrant with Cohere ReRank",
      "type": "@n8n/n8n-nodes-langchain.code",
      "typeVersion": 1,
      "position": [1300, 1560]
    },
    {
      "parameters": {},
      "id": "31f69606-4a6e-481f-84a4-3ab9451718f6",
      "name": "Qdrant with Cohere ReRank1",
      "type": "@n8n/n8n-nodes-langchain.code",
      "typeVersion": 1,
      "position": [2080, 1360]
    }
  ],
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Get Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Get Doc Attributes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Contextual Text",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Chunks To List": {
      "main": [
        [
          {
            "node": "Generate Contextual Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate TF-IDF Sparse Vectors": {
      "main": [
        [
          {
            "node": "Get Values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Chunks From Doc": {
      "main": [
        [
          {
            "node": "Chunks To List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Router": {
      "main": [
        [
          {
            "node": "Generate Sparse Vectors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Contextual Text": {
      "main": [
        [
          {
            "node": "Generate TF-IDF Sparse Vectors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Document": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Get Doc Attributes",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get Doc Attributes": {
      "main": [
        [
          {
            "node": "Create Chunks From Doc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "callerPolicy": "any"
  },
  "staticData": null,
  "pinData": {},
  "triggerCount": 0,
  "meta": null
}
