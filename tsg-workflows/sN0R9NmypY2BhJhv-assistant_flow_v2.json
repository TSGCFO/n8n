{
  "name": "assistant-flow-v2",
  "nodes": [
    {
      "parameters": {
        "chatId": "={{ $('Listen for Incoming Events').first().json.message.from.id }}",
        "text": "={{ $json.AiResponses }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "Markdown"
        }
      },
      "id": "f88dea45-77e7-46cb-9f70-5475961fd4d7",
      "name": "Telegram",
      "type": "n8n-nodes-base.telegram",
      "position": [
        976,
        104
      ],
      "typeVersion": 1.1,
      "webhookId": "616f2628-e544-4ba3-b8a6-90b42794e418",
      "credentials": {
        "telegramApi": {
          "id": "fWSypFy5utgBgI0X",
          "name": "n8n_email_template_bot"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "a0bf9719-4272-46f6-ab3b-eda6f7b44fd8",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.message.text }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "93ad8dcd-bb02-437b-8b3a-7aafcec7e2d9",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        -976,
        304
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "text",
              "stringValue": "={{ $json?.message?.text || \"\" }}"
            }
          ]
        },
        "options": {}
      },
      "id": "f77cb51f-7463-4e33-aa38-3a4d220be5c6",
      "name": "Voice or Text",
      "type": "n8n-nodes-base.set",
      "position": [
        -1200,
        304
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "endpointUrl": "https://rube.app/mcp",
        "serverTransport": "httpStreamable",
        "authentication": "bearerAuth",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.1,
      "position": [
        256,
        736
      ],
      "id": "519de0b7-bf02-4efe-9a04-a0991c52b3d2",
      "name": "MCP Client",
      "credentials": {
        "httpBearerAuth": {
          "id": "CxI5UJOloMMh37Yf",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "dimensions": 1024
        }
      },
      "id": "5cc217b7-762a-45e2-b9d1-c55e03b49c54",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "position": [
        480,
        728
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "JSPFLNImx8SGH5aT",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "590a755b-4e85-4c95-8007-ba3405922db3",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        608,
        728
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chunkSize": 200,
        "chunkOverlap": 40,
        "options": {}
      },
      "id": "3eccc101-176d-49e6-8968-0cc160c074a0",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "position": [
        688,
        936
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {
          "dimensions": 1024
        }
      },
      "id": "2185690b-36bf-4ef2-91fa-1cf8d864dabb",
      "name": "Embeddings for Retrieval",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "position": [
        -160,
        736
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "JSPFLNImx8SGH5aT",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "id": "8200a10a-ac6b-4193-96ec-c9d3b4cd860e",
      "name": "Reranker Cohere",
      "type": "@n8n/n8n-nodes-langchain.rerankerCohere",
      "position": [
        -16,
        736
      ],
      "typeVersion": 1,
      "credentials": {
        "cohereApi": {
          "id": "45I0BOgqIIoZdURW",
          "name": "CohereApi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "RAG_MEMORY",
        "toolDescription": "Long-term memory storage for maintaining context across conversations. Use this to recall previous interactions, user preferences, and historical context.",
        "qdrantCollection": {
          "__rl": true,
          "mode": "list",
          "value": "ltm",
          "cachedResultName": "ltm"
        },
        "topK": 20,
        "useReranker": true,
        "options": {}
      },
      "id": "4b834f91-4de9-4e34-8160-9d9d532221ae",
      "name": "RAG_MEMORY",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "position": [
        -176,
        528
      ],
      "typeVersion": 1.2,
      "credentials": {
        "qdrantApi": {
          "id": "Ue7SrjADwpb4oRLU",
          "name": "QdrantApi account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fdd39640-54c5-4ed7-9f37-c8cd4302a212",
              "name": "output",
              "type": "string",
              "value": "={{ $('Personal Assistant').item.json.output }}"
            }
          ]
        },
        "options": {}
      },
      "id": "1ffb0690-2a88-4694-b98f-4f16c2f2c373",
      "name": "Format Response",
      "type": "n8n-nodes-base.set",
      "position": [
        -1424,
        -128
      ],
      "executeOnce": true,
      "typeVersion": 3.4,
      "disabled": true
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "mode": "list",
          "value": "ltm",
          "cachedResultName": "ltm"
        },
        "options": {}
      },
      "id": "80c0656c-3837-4e62-8e56-9cf925d8b84e",
      "name": "Store Conversation",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "position": [
        512,
        504
      ],
      "typeVersion": 1.2,
      "credentials": {
        "qdrantApi": {
          "id": "Ue7SrjADwpb4oRLU",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "*"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -1424,
        304
      ],
      "id": "5b141a90-0966-4f5f-9107-1aa0d1199b78",
      "name": "Listen for Incoming Events",
      "webhookId": "2a8fdb22-9aa9-4de2-a90a-e538d14f2587",
      "credentials": {
        "telegramApi": {
          "id": "fWSypFy5utgBgI0X",
          "name": "n8n_email_template_bot"
        }
      }
    },
    {
      "parameters": {
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "returnIntermediateSteps": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_Intermediate_Steps', ``, 'boolean') }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        112,
        528
      ],
      "id": "20d8df33-82b2-4946-b68c-c0f7aa48ae4f",
      "name": "AI Agent Tool"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-opus-4-1-20250805",
          "mode": "list",
          "cachedResultName": "Claude Opus 4.1"
        },
        "options": {
          "thinking": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        112,
        736
      ],
      "id": "72986c46-1928-4509-952d-43a56261bcf8",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "y2a5bBpZYLP41Q8y",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message }}",
        "options": {
          "systemMessage": "=Current time and date is {{ $now }}.\n\nProvide general assistance by answering user queries accurately and completely. When a user's query requires the use of external resources, apps, or tools (for example, fetching emails from their Gmail account or accessing any of 300+ integrated applications), clearly recognize this and delegate the relevant task to the AI Agent Tool, which has access to these external applications.\n\nFor each user query:\n- First, analyze and reason step-by-step about what the user is asking.\n- Clearly identify if any part of the user's request requires external tools, app access, or resources not available natively.\n- If a tool is needed, delegate only that portion to the AI Agent Tool, specifying the app and intended action.\n- If possible, continue providing non-tool-based responses natively.\n- Maintain clear separation between your internal reasoning and the final response or actions taken.\n- Always return conclusions and results after the reasoning steps.\n- Continue working until all parts of the user's request are addressed.",
          "returnIntermediateSteps": true,
          "enableStreaming": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -168,
        304
      ],
      "id": "db17946a-06a9-4a0d-af1a-8930ed72d77c",
      "name": "Personal Assistant",
      "retryOnFail": true,
      "alwaysOutputData": false,
      "executeOnce": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-opus-4-1-20250805",
          "mode": "list",
          "cachedResultName": "Claude Opus 4.1"
        },
        "options": {
          "thinking": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        -304,
        528
      ],
      "id": "3496a3eb-6956-43e2-a726-138fbe8eafff",
      "name": "Anthropic Chat Model1",
      "credentials": {
        "anthropicApi": {
          "id": "y2a5bBpZYLP41Q8y",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Listen for Incoming Events').item.json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "id": "8d1e3ae8-5703-4022-8bd3-a38b26d7af92",
      "name": "Get Voice File",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -752,
        232
      ],
      "typeVersion": 1.1,
      "webhookId": "6286fc57-6f83-424e-8cfb-43b736e9b42f",
      "credentials": {
        "telegramApi": {
          "id": "r9JoTSe5sDnaMwF0",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "b5b9d748-9e83-444c-95b8-bdedc59004e5",
      "name": "Speech to Text",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        -528,
        232
      ],
      "typeVersion": 1.3,
      "credentials": {
        "openAiApi": {
          "id": "JSPFLNImx8SGH5aT",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "instructions": "return the output as a property called AiResponses, update your mapping expression in the jsCode parameter to:\n\n{{ items.map(item => ({ json: { AiResponses: item.json.output } })) }}\n\nThis will ensure each returned item has a json property with an object containing AiResponses, which is the correct format for n8n",
        "codeGeneratedForPrompt": "return the output as a property called AiResponses, update your mapping expression in the jsCode parameter to:\n\n{{ items.map(item => ({ json: { AiResponses: item.json.output } })) }}\n\nThis will ensure each returned item has a json property with an object containing AiResponses, which is the correct format for n8n",
        "jsCode": "const items = $input.all();\nconst AiResponses = items.map((item) => ({\n  json: { AiResponses: item.json.output },\n}));\nreturn AiResponses;\n"
      },
      "type": "n8n-nodes-base.aiTransform",
      "typeVersion": 1,
      "position": [
        616,
        104
      ],
      "id": "ca1bcd0b-bb90-41db-b029-30d97d69fd93",
      "name": "AI Transform"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5",
          "mode": "list",
          "cachedResultName": "gpt-5"
        },
        "options": {
          "reasoningEffort": "high",
          "timeout": 6000000000000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1424,
        936
      ],
      "id": "00b75bfa-dedb-4d76-acf2-c1d92a254a20",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "JSPFLNImx8SGH5aT",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "connections": {
    "If": {
      "main": [
        [
          {
            "node": "Get Voice File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Personal Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Voice or Text": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client": {
      "ai_tool": [
        [
          {
            "node": "AI Agent Tool",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Store Conversation",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Store Conversation",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings for Retrieval": {
      "ai_embedding": [
        [
          {
            "node": "RAG_MEMORY",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Reranker Cohere": {
      "ai_reranker": [
        [
          {
            "node": "RAG_MEMORY",
            "type": "ai_reranker",
            "index": 0
          }
        ]
      ]
    },
    "RAG_MEMORY": {
      "ai_tool": [
        [
          {
            "node": "Personal Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        []
      ]
    },
    "Store Conversation": {
      "main": [
        []
      ]
    },
    "Listen for Incoming Events": {
      "main": [
        [
          {
            "node": "Voice or Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Tool": {
      "ai_tool": [
        [
          {
            "node": "Personal Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent Tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Personal Assistant": {
      "main": [
        [
          {
            "node": "Store Conversation",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Transform",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Anthropic Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Personal Assistant",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get Voice File": {
      "main": [
        [
          {
            "node": "Speech to Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Speech to Text": {
      "main": [
        [
          {
            "node": "Personal Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Transform": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        []
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "eTI4lMf2zst5TMfc"
  },
  "staticData": null,
  "pinData": {},
  "triggerCount": 1,
  "meta": {
    "templateCredsSetupCompleted": true
  }
}